{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Lisp/Desktop/items/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport \"cropperjs/dist/cropper.css\";\nimport Cropper from \"cropperjs\";\nimport { updateUserPhoto as _updateUserPhoto } from \"@/api/users\";\nexport default {\n  props: {\n    img: {\n      type: [String, Object],\n      require: true\n    }\n  },\n  data: function data() {\n    return {\n      cropper: null\n    };\n  },\n  mounted: function mounted() {\n    var image = this.$refs.img;\n    this.cropper = new Cropper(image, {\n      viewMode: 1,\n      dragMode: \"move\",\n      aspectRatio: 1,\n      autoCropArea: 1,\n      cropBoxMovable: false,\n      cropBoxResizable: false,\n      background: false\n    });\n  },\n  methods: {\n    onConfirm: function onConfirm() {\n      var _this = this;\n\n      // 基于服务端的裁切使用 getData 方法获取裁切参数\n      // console.log(this.cropper.getData())\n      // 纯客户端的裁切使用 getCroppedCanvas 获取裁切的文件对象\n      this.cropper.getCroppedCanvas().toBlob(function (blob) {\n        return _this.updateUserPhoto(blob);\n      });\n    },\n    updateUserPhoto: function updateUserPhoto(blob) {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var formData, _yield$_updateUserPho, data;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // 错误的用法\n                // 如果接口要求 Content-Type 是 application/json\n                // 则传递普通 JavaScript 对象\n                // updateUserPhoto({\n                //   photo: blob\n                // })\n                // 如果接口要求 Content-Type 是 multipart/form-data\n                // 则你必须传递 FormData 对象\n                _this2.$toast.loading({\n                  message: \"保存中...\",\n                  forbidClick: true,\n                  // 禁止背景点击\n                  duration: 0 // 持续展示\n\n                });\n\n                _context.prev = 1;\n                formData = new FormData();\n                formData.append(\"photo\", blob);\n                _context.next = 6;\n                return _updateUserPhoto(formData);\n\n              case 6:\n                _yield$_updateUserPho = _context.sent;\n                data = _yield$_updateUserPho.data;\n\n                // 关闭弹出层\n                _this2.$emit(\"close\"); // 更新视图\n\n\n                _this2.$emit(\"update-photo\", data.data.photo); // 提示成功\n\n\n                _this2.$toast.success(\"更新成功\");\n\n                _context.next = 16;\n                break;\n\n              case 13:\n                _context.prev = 13;\n                _context.t0 = _context[\"catch\"](1);\n\n                _this2.$toast.fail(\"更新失败\");\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 13]]);\n      }))();\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;AAWA;AACA;AAEA;AACA;AACAA;AACAC;AACAC,4BADA;AAEAC;AAFA;AADA,GADA;AAOAC,MAPA,kBAOA;AACA;AACAC;AADA;AAGA,GAXA;AAYAC,SAZA,qBAYA;AACA;AACA;AACAC,iBADA;AAEAC,sBAFA;AAGAC,oBAHA;AAIAC,qBAJA;AAKAC,2BALA;AAMAC,6BANA;AAOAC;AAPA;AASA,GAvBA;AAwBAC;AACAC,aADA,uBACA;AAAA;;AACA;AACA;AAEA;AAEA,mBACAC,gBADA,GAEAC,MAFA,CAEA;AAAA;AAAA,OAFA;AAGA,KAVA;AAWAC,mBAXA,2BAWAC,IAXA,EAWA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,mCADA;AAEAC,mCAFA;AAEA;AACAC,6BAHA,CAGA;;AAHA;;AATA;AAeAC,wBAfA,GAeA,cAfA;AAgBAA;AAhBA;AAAA,uBAkBAL,0BAlBA;;AAAA;AAAA;AAkBAd,oBAlBA,yBAkBAA,IAlBA;;AAmBA;AACA,sCApBA,CAqBA;;;AACA,8DAtBA,CAuBA;;;AACA;;AAxBA;AAAA;;AAAA;AAAA;AAAA;;AA0BA;;AA1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BA;AAvCA;AAxBA","names":["props","img","type","require","data","cropper","mounted","viewMode","dragMode","aspectRatio","autoCropArea","cropBoxMovable","cropBoxResizable","background","methods","onConfirm","getCroppedCanvas","toBlob","updateUserPhoto","blob","message","forbidClick","duration","formData"],"sourceRoot":"src/views/userProfile/components","sources":["updatePhoto.vue"],"sourcesContent":["<template>\r\n  <div class=\"photo-img\">\r\n    <img :src=\"img\" alt ref=\"img\" />\r\n    <div class=\"toobar\">\r\n      <div class=\"cancel\" @click=\"$emit('close')\">取消</div>\r\n      <div class=\"confirm\" @click=\"onConfirm\">完成</div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport \"cropperjs/dist/cropper.css\";\r\nimport Cropper from \"cropperjs\";\r\n\r\nimport { updateUserPhoto } from \"@/api/users\";\r\nexport default {\r\n  props: {\r\n    img: {\r\n      type: [String, Object],\r\n      require: true,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      cropper: null,\r\n    };\r\n  },\r\n  mounted() {\r\n    const image = this.$refs.img;\r\n    this.cropper = new Cropper(image, {\r\n      viewMode: 1,\r\n      dragMode: \"move\",\r\n      aspectRatio: 1,\r\n      autoCropArea: 1,\r\n      cropBoxMovable: false,\r\n      cropBoxResizable: false,\r\n      background: false,\r\n    });\r\n  },\r\n  methods: {\r\n    onConfirm() {\r\n      // 基于服务端的裁切使用 getData 方法获取裁切参数\r\n      // console.log(this.cropper.getData())\r\n\r\n      // 纯客户端的裁切使用 getCroppedCanvas 获取裁切的文件对象\r\n\r\n      this.cropper\r\n        .getCroppedCanvas()\r\n        .toBlob((blob) => this.updateUserPhoto(blob));\r\n    },\r\n    async updateUserPhoto(blob) {\r\n      // 错误的用法\r\n      // 如果接口要求 Content-Type 是 application/json\r\n      // 则传递普通 JavaScript 对象\r\n      // updateUserPhoto({\r\n      //   photo: blob\r\n      // })\r\n      // 如果接口要求 Content-Type 是 multipart/form-data\r\n      // 则你必须传递 FormData 对象\r\n      this.$toast.loading({\r\n        message: \"保存中...\",\r\n        forbidClick: true, // 禁止背景点击\r\n        duration: 0, // 持续展示\r\n      });\r\n      try {\r\n        const formData = new FormData();\r\n        formData.append(\"photo\", blob);\r\n\r\n        const { data } = await updateUserPhoto(formData);\r\n        // 关闭弹出层\r\n        this.$emit(\"close\");\r\n        // 更新视图\r\n        this.$emit(\"update-photo\", data.data.photo);\r\n        // 提示成功\r\n        this.$toast.success(\"更新成功\");\r\n      } catch (err) {\r\n        this.$toast.fail(\"更新失败\");\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.photo-img {\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background-color: #555;\r\n  .toobar {\r\n    position: fixed;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    //   align-items: center;\r\n    .cancel,\r\n    .confirm {\r\n      width: 90px;\r\n      height: 90px;\r\n      color: #fff;\r\n      display: flex;\r\n      font-size: 30px;\r\n      justify-content: center;\r\n      align-items: center;\r\n    }\r\n  }\r\n  img {\r\n    max-width: 100%;\r\n    display: block;\r\n    // height: 100%;\r\n  }\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}