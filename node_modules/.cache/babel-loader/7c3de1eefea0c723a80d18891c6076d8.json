{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Lisp/Desktop/items/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Article from \"./component/article-list.vue\";\nimport Editchannel from \"./component/channel-Edit.vue\"; // import Editchannel from \"./component/s.vue\";\n// 按需导入 API 接口\n\nimport { getdata } from \"@/api/users\";\nexport default {\n  name: \"my-Home\",\n  data: function data() {\n    return {\n      active: 0,\n      channelData: [],\n      isShowEdit: true\n    };\n  },\n  created: function created() {\n    // this.initArticleList()\n    this.loadData();\n  },\n  methods: {\n    // 获取频道列表数据\n    loadData: function loadData() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _yield$getdata, data;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return getdata();\n\n              case 3:\n                _yield$getdata = _context.sent;\n                data = _yield$getdata.data;\n                _this.channelData = data.data.channels;\n                _context.next = 11;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](0);\n\n                _this.$toast(\"获取数据失败，未知错误\");\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 8]]);\n      }))();\n    }\n  },\n  // 注册组件\n  components: {\n    // ArticleInfo\n    Article: Article,\n    Editchannel: Editchannel\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgEA;AACA,uD,CACA;AAEA;;AACA;AAEA;AACAA,iBADA;AAEAC,MAFA,kBAEA;AACA;AACAC,eADA;AAEAC,qBAFA;AAGAC;AAHA;AAMA,GATA;AAUAC,SAVA,qBAUA;AACA;AACA;AACA,GAbA;AAcAC;AACA;AACAC,YAFA,sBAEA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEAC,SAFA;;AAAA;AAAA;AAEAP,oBAFA,kBAEAA,IAFA;AAGA;AAHA;AAAA;;AAAA;AAAA;AAAA;;AAKA;;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AATA,GAdA;AA0BA;AACAQ;AACA;AACAC,oBAFA;AAGAC;AAHA;AA3BA","names":["name","data","active","channelData","isShowEdit","created","methods","loadData","getdata","components","Article","Editchannel"],"sourceRoot":"src/views/Home","sources":["Home.vue"],"sourcesContent":["<template>\n    <div class=\"home-container\">\n        <!-- 头部区域 -->\n        <van-nav-bar fixed>\n            <!-- 头部搜索按钮 -->\n            <template #title>\n                <van-button class=\"search-btn\" tpye=\"info\" size=\"small\" icon=\"search\" round>搜索</van-button>\n            </template>\n        </van-nav-bar>\n\n        <!-- 频道列表 -->\n        <van-tabs v-model=\"active\" class=\"channel-tabs\" animated swipeable>\n            <van-tab v-for=\"item in channelData\" :key=\"item.id\" :title=\"item.name\">\n                <Article :item=\"item\" />\n            </van-tab>\n\n            <template #nav-right>\n                <div class=\"horder\"></div>\n                <div class=\"more-btn\" @click=\"isShowEdit=true\">\n                    <i class=\"ranran icon-gengduo\"></i>\n                </div>\n            </template>\n        </van-tabs>\n        <!-- / 频道列表 -->\n\n        <!-- 频道编辑 -->\n        <!-- <Editchannel> -->\n        <div>\n            <van-popup\n                v-model=\"isShowEdit\"\n                closeable\n                close-icon-position=\"top-left\"\n                position=\"right\"\n                :style=\"{ height: '100%',width:'100%' }\"\n            >\n            <Editchannel/>\n            </van-popup>\n        </div>\n\n        <!-- </Editchannel> -->\n\n        <!-- / 频道编辑 -->\n\n        <!-- 导入，注册，并使用 ArticleInfo 组件 -->\n        <!-- 在使用组件的时候，如果某个属性名是“小驼峰”形式，则绑定属性的时候，建议改写成“连字符”格式。例如： -->\n        <!-- cmtCount 建议写成 cmt-count -->\n\n        <!-- <van-pull-refresh v-model=\"isLoading\" :disabled=\"finished\" @refresh=\"onRefresh\">\n      <van-list v-model=\"loading\" :finished=\"finished\" finished-text=\"没有更多了\" @load=\"onLoad\">\n        <ArticleInfo\n          v-for=\"item in artlist\"\n          :key=\"item.id\"\n          :title=\"item.title\"\n          :author=\"item.aut_name\"\n          :cmt-count=\"item.comm_count\"\n          :time=\"item.pubdate\"\n          :cover=\"item.cover\"\n        ></ArticleInfo>\n      </van-list>\n        </van-pull-refresh>-->\n    </div>\n</template>\n\n<script>\nimport Article from \"./component/article-list.vue\";\nimport Editchannel from \"./component/channel-Edit.vue\";\n// import Editchannel from \"./component/s.vue\";\n\n// 按需导入 API 接口\nimport { getdata } from \"@/api/users\";\n\nexport default {\n    name: \"my-Home\",\n    data() {\n        return {\n            active: 0,\n            channelData: [],\n            isShowEdit:true,\n            \n        };\n    },\n    created() {\n        // this.initArticleList()\n        this.loadData();\n    },\n    methods: {\n        // 获取频道列表数据\n        async loadData() {\n            try {\n                const { data } = await getdata();\n                this.channelData = data.data.channels;\n            } catch (err) {\n                this.$toast(\"获取数据失败，未知错误\");\n            }\n        },\n       \n    },\n    // 注册组件\n    components: {\n        // ArticleInfo\n        Article,\n        Editchannel,\n    },\n};\n</script>\n\nList列表组件:瀑布流滚动加载，用于展示长列表。\n\nList组件通过 loading和 finished 两个变量控制加载状态，当组件初始化或滚动到到底部时，\n会触发load 事件并将loading.设置成 true，此时可以发起异步操作并更新数据，\n\n数据更新完毕后,将 loading设置成false即可。\n\n若数据已全部加载完毕，则直接将 finished 设置成 true即可。\n\n- load事件:\n+ List初始化后会触发一次load事件，用于加载第一屏的数据。＋如果一次请求加载的数据条数较少，导致列表内容无法铺满当前屏幕，List会继续触发load\n事件，直到内容铺满屏幕或数据全部加载完成。\n\n- loading属性:控制加载中的 loading状态＋非加载中，loading为false，此时会根据列表滚动位置判断是否触发load事件（列表内容不足一屏幕时，会直接触发）\n＋加载中，loading为true，表示正在发送异步请求，此时不会触发load事件\n\n- finished属性:控制加载结束的状态\n＋在每次请求完毕后，需要手动将loading设置为false，表示本次加载结束\n＋所有数据加载结束，finished为 true，此时不会触发load事件-->\n\n<style lang=\"less\" scoped>\n.home-container {\n    padding-top: 174px;\n    padding-bottom: 100px;\n    .van-nav-bar__title {\n        max-width: unset;\n    }\n    .search-btn {\n        width: 450px;\n        height: 64px;\n        background-color: #5babfb;\n        border: none;\n        font-size: 28px;\n        .van-button__icon {\n            font-size: 32px;\n        }\n        .van-button__text {\n            color: #fff;\n        }\n    }\n    /deep/ .channel-tabs {\n        .van-tabs__wrap {\n            height: 82px;\n            position: fixed;\n            z-index: 1;\n            left: 0;\n            top: 92px;\n            right: 0;\n        }\n        .van-tab {\n            border-right: 1px solid #edeff3;\n            min-width: 200px;\n            height: 82px;\n            font-size: 30px;\n            color: #777777;\n        }\n        .van-tab--active {\n            color: #333333;\n        }\n        .van-tabs__nav {\n            padding-bottom: 0;\n        }\n        .van-tabs__line {\n            width: 31px !important;\n            height: 6px;\n            background-color: #3296fa;\n            bottom: 8px;\n        }\n        .horder {\n            flex-shrink: 0;\n            height: 82px;\n            width: 66px;\n        }\n        .more-btn {\n            position: fixed;\n            right: 0;\n            width: 66px;\n            height: 82px;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            background-color: #fff;\n            opacity: 0.902;\n            i {\n                font-size: 33px;\n            }\n        }\n    }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}