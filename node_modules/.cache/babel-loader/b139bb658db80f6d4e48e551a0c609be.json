{"ast":null,"code":"import _toConsumableArray from \"C:/Users/Lisp/Desktop/items/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _asyncToGenerator from \"C:/Users/Lisp/Desktop/items/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.array.concat.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getArticleList } from \"@/api/getListApi\";\nexport default {\n  data: function data() {\n    return {\n      list: [],\n      loading: false,\n      // 数据是否加载中\n      finished: false,\n      // 控制 数据是否 加载完毕\n      timestamp: null,\n      // 下一页数据的 页码时间戳\n      error: false,\n      // 加载失败\n      refreshing: false,\n      isfresh: false\n    };\n  },\n  props: [\"item\"],\n  methods: {\n    onLoad: function onLoad() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this$timestamp, _yield$getArticleList, data;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return getArticleList({\n                  channel_id: _this.item.id,\n                  timestamp: (_this$timestamp = _this.timestamp) !== null && _this$timestamp !== void 0 ? _this$timestamp : Date.now()\n                });\n\n              case 3:\n                _yield$getArticleList = _context.sent;\n                data = _yield$getArticleList.data.data;\n                _this.list = [].concat(_toConsumableArray(_this.list), _toConsumableArray(data.results));\n                console.log(_this.list);\n                console.log(data);\n                _this.loading = false;\n                _this.timestamp = data.pre_timestamp;\n\n                if (data.results.length === 0) {\n                  _this.finished = true;\n                }\n\n                _context.next = 17;\n                break;\n\n              case 13:\n                _context.prev = 13;\n                _context.t0 = _context[\"catch\"](0);\n                _this.error = true;\n                _this.loading = false;\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 13]]);\n      }))();\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAqBA;AAEA;AACAA,MADA,kBACA;AACA;AACAC,cADA;AAEAC,oBAFA;AAEA;AACAC,qBAHA;AAGA;AACAC,qBAJA;AAIA;AACAC,kBALA;AAKA;AACAC,uBANA;AAOAC;AAPA;AASA,GAXA;AAYAC,iBAZA;AAaAC;AACAC,UADA,oBACA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAOAC;AACAC,2CADA;AAEAR;AAFA,kBAPA;;AAAA;AAAA;AAMAJ,oBANA,yBAMAA,IANA,CAMAA,IANA;AAWA;AACAa;AACAA;AAEA;AACA;;AAEA;AACA;AACA;;AApBA;AAAA;;AAAA;AAAA;AAAA;AAsBA;AACA;;AAvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwCA;AAzCA;AAbA","names":["data","list","loading","finished","timestamp","error","refreshing","isfresh","props","methods","onLoad","getArticleList","channel_id","console"],"sourceRoot":"src/views/Home/component","sources":["article-list.vue"],"sourcesContent":["<template>\r\n  <div class=\"list-container\">\r\n    <van-pull-refresh\r\n      v-model=\"isfresh\"\r\n      @refresh=\"onRefresh\"\r\n    >\r\n      <van-list\r\n        v-model=\"loading\"\r\n        :finished=\"finished\"\r\n        finished-text=\"没有更多了\"\r\n        :error.sync=\"error\"\r\n        error-text=\"请求失败，click重新加载\"\r\n        @load=\"onLoad\"\r\n      >\r\n        <van-cell v-for=\"item in list\" :key=\"item.art_id\" :title=\"item.title\" />\r\n      </van-list>\r\n    </van-pull-refresh>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getArticleList } from \"@/api/getListApi\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      list: [],\r\n      loading: false, // 数据是否加载中\r\n      finished: false, // 控制 数据是否 加载完毕\r\n      timestamp: null, // 下一页数据的 页码时间戳\r\n      error:false, // 加载失败\r\n      refreshing:false,\r\n      isfresh:false,\r\n    };\r\n  },\r\n  props: [\"item\"],\r\n  methods: {\r\n    async onLoad() {\r\n      // 异步更新数据\r\n      // let params = { channel_id: this.item.id, timestamp: Date.now() };\r\n      try {\r\n        //  let { data } = await getArticleList(0,Date.now());\r\n        let {\r\n          data: { data },\r\n        } = await getArticleList({\r\n          channel_id: this.item.id,\r\n          timestamp: this.timestamp ?? Date.now(),\r\n        });\r\n        this.list = [...this.list, ...data.results];\r\n        console.log(this.list);\r\n        console.log(data);\r\n\r\n        this.loading = false;\r\n        this.timestamp = data.pre_timestamp;\r\n\r\n        if (data.results.length === 0) {\r\n          this.finished = true;\r\n        }\r\n      } catch (err) {\r\n          this.error = true;\r\n          this.loading = false;\r\n      }\r\n      //   console.log(this.item);\r\n      //   // setTimeout 仅做示例，真实场景中一般为 ajax 请求\r\n      //   setTimeout(() => {\r\n      //     for (let i = 0; i < 10; i++) {\r\n      //       this.list.push(this.list.length + 1);\r\n      //     }\r\n\r\n      //     // 加载状态结束\r\n      //     this.loading = false;\r\n\r\n      //     // 数据全部加载完成\r\n      //     if (this.list.length >= 40) {\r\n      //       this.finished = true;\r\n      //     }\r\n      //   }, 1000);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style></style>\r\n"]},"metadata":{},"sourceType":"module"}