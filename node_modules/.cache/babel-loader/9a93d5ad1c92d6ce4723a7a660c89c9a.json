{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport { padZero } from '../utils/format/string';\nvar SECOND = 1000;\nvar MINUTE = 60 * SECOND;\nvar HOUR = 60 * MINUTE;\nvar DAY = 24 * HOUR;\nexport function parseTimeData(time) {\n  var days = Math.floor(time / DAY);\n  var hours = Math.floor(time % DAY / HOUR);\n  var minutes = Math.floor(time % HOUR / MINUTE);\n  var seconds = Math.floor(time % MINUTE / SECOND);\n  var milliseconds = Math.floor(time % SECOND);\n  return {\n    days: days,\n    hours: hours,\n    minutes: minutes,\n    seconds: seconds,\n    milliseconds: milliseconds\n  };\n}\nexport function parseFormat(format, timeData) {\n  var days = timeData.days;\n  var hours = timeData.hours,\n      minutes = timeData.minutes,\n      seconds = timeData.seconds,\n      milliseconds = timeData.milliseconds;\n\n  if (format.indexOf('DD') === -1) {\n    hours += days * 24;\n  } else {\n    format = format.replace('DD', padZero(days));\n  }\n\n  if (format.indexOf('HH') === -1) {\n    minutes += hours * 60;\n  } else {\n    format = format.replace('HH', padZero(hours));\n  }\n\n  if (format.indexOf('mm') === -1) {\n    seconds += minutes * 60;\n  } else {\n    format = format.replace('mm', padZero(minutes));\n  }\n\n  if (format.indexOf('ss') === -1) {\n    milliseconds += seconds * 1000;\n  } else {\n    format = format.replace('ss', padZero(seconds));\n  }\n\n  if (format.indexOf('S') !== -1) {\n    var ms = padZero(milliseconds, 3);\n\n    if (format.indexOf('SSS') !== -1) {\n      format = format.replace('SSS', ms);\n    } else if (format.indexOf('SS') !== -1) {\n      format = format.replace('SS', ms.slice(0, 2));\n    } else {\n      format = format.replace('S', ms.charAt(0));\n    }\n  }\n\n  return format;\n}\nexport function isSameSecond(time1, time2) {\n  return Math.floor(time1 / 1000) === Math.floor(time2 / 1000);\n}","map":{"version":3,"sources":["C:/Users/Lisp/Desktop/items/node_modules/vant/es/count-down/utils.js"],"names":["padZero","SECOND","MINUTE","HOUR","DAY","parseTimeData","time","days","Math","floor","hours","minutes","seconds","milliseconds","parseFormat","format","timeData","indexOf","replace","ms","slice","charAt","isSameSecond","time1","time2"],"mappings":"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","sourcesContent":["import { padZero } from '../utils/format/string';\nvar SECOND = 1000;\nvar MINUTE = 60 * SECOND;\nvar HOUR = 60 * MINUTE;\nvar DAY = 24 * HOUR;\nexport function parseTimeData(time) {\n  var days = Math.floor(time / DAY);\n  var hours = Math.floor(time % DAY / HOUR);\n  var minutes = Math.floor(time % HOUR / MINUTE);\n  var seconds = Math.floor(time % MINUTE / SECOND);\n  var milliseconds = Math.floor(time % SECOND);\n  return {\n    days: days,\n    hours: hours,\n    minutes: minutes,\n    seconds: seconds,\n    milliseconds: milliseconds\n  };\n}\nexport function parseFormat(format, timeData) {\n  var days = timeData.days;\n  var hours = timeData.hours,\n      minutes = timeData.minutes,\n      seconds = timeData.seconds,\n      milliseconds = timeData.milliseconds;\n\n  if (format.indexOf('DD') === -1) {\n    hours += days * 24;\n  } else {\n    format = format.replace('DD', padZero(days));\n  }\n\n  if (format.indexOf('HH') === -1) {\n    minutes += hours * 60;\n  } else {\n    format = format.replace('HH', padZero(hours));\n  }\n\n  if (format.indexOf('mm') === -1) {\n    seconds += minutes * 60;\n  } else {\n    format = format.replace('mm', padZero(minutes));\n  }\n\n  if (format.indexOf('ss') === -1) {\n    milliseconds += seconds * 1000;\n  } else {\n    format = format.replace('ss', padZero(seconds));\n  }\n\n  if (format.indexOf('S') !== -1) {\n    var ms = padZero(milliseconds, 3);\n\n    if (format.indexOf('SSS') !== -1) {\n      format = format.replace('SSS', ms);\n    } else if (format.indexOf('SS') !== -1) {\n      format = format.replace('SS', ms.slice(0, 2));\n    } else {\n      format = format.replace('S', ms.charAt(0));\n    }\n  }\n\n  return format;\n}\nexport function isSameSecond(time1, time2) {\n  return Math.floor(time1 / 1000) === Math.floor(time2 / 1000);\n}"]},"metadata":{},"sourceType":"module"}