{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.string.iterator.js\";\n\nfunction Random(_ref) {\n  var min = _ref.min,\n      max = _ref.max,\n      last = _ref.last,\n      _ref$first = _ref.first,\n      first = _ref$first === void 0 ? false : _ref$first;\n\n  if (first) {\n    last[0] = Math.round(Math.random() * (max - min)) + min;\n    return last[0];\n  }\n\n  last[1] = Math.round(Math.random() * (max - min)) + min;\n\n  if (last[1] != last[0]) {\n    last[0] = last[1];\n    return last[1];\n  } else {\n    return Random({\n      min: min,\n      max: max,\n      last: last\n    });\n  }\n}\n\nvar plugins = {\n  begin: 0,\n  install: function install(Vue) {\n    // const defaultSrc = options.default\n    Vue.directive('lazy', {\n      bind: function bind(el, binding) {\n        plugins.scr = binding.value;\n        plugins.init(el, binding.value);\n      },\n      inserted: function inserted(el) {\n        if (IntersectionObserver) {\n          // console.log(\"---\",IntersectionObserver);\n          plugins.ovserver(el);\n        }\n      }\n    });\n\n    Vue.prototype.throttle = function (fn, delay) {\n      var curTime = Date.now();\n\n      if (curTime - plugins.begin > delay) {\n        fn();\n        plugins.begin = curTime;\n      }\n    };\n  },\n  init: function init(el, val) {\n    console.log(el);\n    el.setAttribute('data-src', val);\n  },\n  ovserver: function ovserver(el) {\n    var io = new IntersectionObserver(function (entries) {\n      var realSrc = el.dataset.src;\n\n      if (entries[0].isIntersecting) {\n        // if (realSrc) {\n        el.src = realSrc; // el.removeAttribute(\"data-src\")\n        // }\n      } // else{\n      //     el.setAttribute('data-src', plugins.scr)\n      // }\n\n    });\n    io.observe(el);\n  } // 监听scroll事件\n  // listenerScroll(el) {\n  //     const handler = plugins.throttle(LazyLoad.load, 300)\n  //     plugins.load(el)\n  //     window.addEventListener('scroll', () => {\n  //         handler(el)\n  //     })\n  // },\n\n};\n\nfunction jsonpToJson(datas) {\n  var jsonData = null;\n  console.log(datas); // 下面是对获取到的数据进行处理，把jsonp格式的数据处理成json格式的数据\n\n  if (typeof datas === 'string') {\n    // 返回的是jsonp类型的数据，所以要用正则表达式来匹配截取json数据\n    var reg = /^\\w+\\((\\{[^()]+\\})\\)$/;\n    var matches = datas.match(reg); // matches匹配到的是数组，数组第一个是所有正则表达式匹配的字符串，第二个是第一个小括号匹配到的字符串\n\n    if (matches) {\n      jsonData = JSON.parse(matches[1]);\n    }\n  }\n\n  return jsonData;\n} //  function findscroller(element){\n//     element.onscroll = function(){ console.log(element);}\n//     Array.from(element.children).forEach(findscroller)\n// }\n// findscroller(document.body)\n\n\nvar query = function query(selector) {\n  return Array.from(document.querySelectorAll(selector));\n};\n\nexport { Random, plugins, jsonpToJson, query };","map":{"version":3,"sources":["C:/Users/Lisp/Desktop/items/src/utils/toolFn.js"],"names":["Random","min","max","last","first","Math","round","random","plugins","begin","install","Vue","directive","bind","el","binding","scr","value","init","inserted","IntersectionObserver","ovserver","prototype","throttle","fn","delay","curTime","Date","now","val","console","log","setAttribute","io","entries","realSrc","dataset","src","isIntersecting","observe","jsonpToJson","datas","jsonData","reg","matches","match","JSON","parse","query","selector","Array","from","document","querySelectorAll"],"mappings":"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","sourcesContent":["function Random({\r\n    min,\r\n    max,\r\n    last,\r\n    first = false\r\n}) {\r\n\r\n    if (first) {\r\n        last[0] = Math.round(Math.random() * (max - min)) + min;\r\n        return last[0]\r\n    }\r\n\r\n    last[1] = Math.round(Math.random() * (max - min)) + min;\r\n\r\n    if (last[1] != last[0]) {\r\n        last[0] = last[1]\r\n        return last[1]\r\n    } else {\r\n        return Random({\r\n            min,\r\n            max,\r\n            last\r\n        })\r\n    }\r\n\r\n}\r\n\r\nconst plugins = {\r\n    begin: 0,\r\n    install(Vue) {\r\n        // const defaultSrc = options.default\r\n        Vue.directive('lazy', {\r\n            bind(el, binding) {\r\n                plugins.scr = binding.value\r\n                plugins.init(el, binding.value)\r\n                \r\n            },\r\n            inserted(el) {\r\n                if(IntersectionObserver){\r\n                    // console.log(\"---\",IntersectionObserver);\r\n                    plugins.ovserver(el)\r\n                }\r\n            }\r\n        })\r\n\r\n        Vue.prototype.throttle = function (fn, delay) {\r\n            let curTime = Date.now();\r\n            if (curTime - plugins.begin > delay) {\r\n                fn()\r\n                plugins.begin = curTime\r\n            }\r\n\r\n        }\r\n\r\n    },\r\n    init(el, val) {\r\n        console.log(el);\r\n        el.setAttribute('data-src', val)\r\n    },\r\n    ovserver(el) {\r\n        let io = new IntersectionObserver(entries => {\r\n            const realSrc = el.dataset.src\r\n            if (entries[0].isIntersecting) {\r\n                // if (realSrc) {\r\n                    el.src = realSrc\r\n                    // el.removeAttribute(\"data-src\")\r\n                // }\r\n            }\r\n            // else{\r\n            //     el.setAttribute('data-src', plugins.scr)\r\n            // }\r\n        })\r\n        io.observe(el)\r\n    },\r\n    // 监听scroll事件\r\n    // listenerScroll(el) {\r\n    //     const handler = plugins.throttle(LazyLoad.load, 300)\r\n    //     plugins.load(el)\r\n    //     window.addEventListener('scroll', () => {\r\n    //         handler(el)\r\n    //     })\r\n    // },\r\n\r\n}\r\n\r\nfunction jsonpToJson(datas) {\r\n    let jsonData = null\r\n    console.log(datas);\r\n    // 下面是对获取到的数据进行处理，把jsonp格式的数据处理成json格式的数据\r\n    if (typeof datas === 'string') {\r\n        // 返回的是jsonp类型的数据，所以要用正则表达式来匹配截取json数据\r\n        const reg = /^\\w+\\((\\{[^()]+\\})\\)$/\r\n        const matches = datas.match(reg)\r\n        // matches匹配到的是数组，数组第一个是所有正则表达式匹配的字符串，第二个是第一个小括号匹配到的字符串\r\n        if (matches) {\r\n            jsonData = JSON.parse(matches[1])\r\n        }\r\n    }\r\n    return jsonData\r\n}\r\n\r\n\r\n//  function findscroller(element){\r\n//     element.onscroll = function(){ console.log(element);}\r\n\r\n//     Array.from(element.children).forEach(findscroller)\r\n// }\r\n\r\n// findscroller(document.body)\r\n\r\nconst query = function (selector) {\r\n    return Array.from(document.querySelectorAll(selector))\r\n}\r\n\r\nexport {\r\n    Random,\r\n    plugins,\r\n    jsonpToJson,\r\n    query\r\n}"]},"metadata":{},"sourceType":"module"}