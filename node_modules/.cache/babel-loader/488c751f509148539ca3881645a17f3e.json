{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// 按需导入 API 接口\n// import { getArticleListAPI } from '@/api/articleAPI.js'\n// 导入需要的组件\n// import ArticleInfo from '@/components/Article/ArticleInfo.vue'\nexport default {\n  name: \"my-Home\",\n  data: function data() {\n    return {\n      active: 0,\n      // 页码值\n      page: 1,\n      // 每页显示多少条数据\n      limit: 10,\n      // 文章的数组\n      artlist: [],\n      // 是否正在加载下一页数据，如果 loading 为 true，则不会反复触发 load 事件\n      // 每当下一页数据请求回来之后，千万要记得，把 loading 从 true 改为 false\n      loading: true,\n      // 所有数据是否加载完毕了，如果没有更多数据了，一定要把 finished 改成 true\n      finished: false,\n      // 是否正在下拉刷新\n      isLoading: false\n    };\n  },\n  created: function created() {// this.initArticleList()\n  },\n  methods: {// 封装获取文章列表数据的方法\n    // async initArticleList(isRefresh) {\n    //   // 发起 GET 请求，获取文章的列表数据\n    //   const { data: res } = await getArticleListAPI(this.page, this.limit)\n    //   if (isRefresh) {\n    //     // 证明是下拉刷新；新数据在前，旧数据在后\n    //     // this.artlist = [新数据在后, 旧数据在前]\n    //     this.artlist = [...res, ...this.artlist]\n    //     this.isLoading = false\n    //   } else {\n    //     // 证明是上拉加载更多；旧数据在前，新数据在后\n    //     // this.artlist = [旧数据在前, 新数据在后]\n    //     this.artlist = [...this.artlist, ...res]\n    //     this.loading = false\n    //   }\n    //   if (res.length === 0) {\n    //     // 证明没有下一页数据了，直接把 finished 改为 true，表示数据加载完了！\n    //     this.finished = true\n    //   }\n    // },\n    // 只要 onLoad 被调用，就应该请求下一页数据\n    // onLoad() {\n    //   console.log('触发了 load 事件！')\n    //   // 1. 让页码值 +1\n    //   this.page++\n    //   // 2. 重新请求接口获取数据\n    //   this.initArticleList()\n    // },\n    // // 下拉刷新的处理函数\n    // onRefresh() {\n    //   console.log('触发了下拉刷新！')\n    //   // 1. 让页码值 +1\n    //   this.page++\n    //   // 2. 重新请求接口获取数据\n    //   this.initArticleList(true)\n    // }\n  },\n  // 注册组件\n  components: {// ArticleInfo\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA;AACA;AAEA;AACA;AAEA;AACAA,iBADA;AAEAC,MAFA,kBAEA;AACA;AACAC,eADA;AAEA;AACAC,aAHA;AAIA;AACAC,eALA;AAMA;AACAC,iBAPA;AAQA;AACA;AACAC,mBAVA;AAWA;AACAC,qBAZA;AAaA;AACAC;AAdA;AAgBA,GAnBA;AAoBAC,SApBA,qBAoBA,CACA;AACA,GAtBA;AAuBAC,YACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApCA,GAvBA;AA6DA;AACAC,eACA;AADA;AA9DA","names":["name","data","active","page","limit","artlist","loading","finished","isLoading","created","methods","components"],"sourceRoot":"src/views/Home","sources":["Home.vue"],"sourcesContent":["<template>\n    <div class=\"home-container\">\n        <!-- 头部区域 -->\n        <van-nav-bar>\n            <!-- 头部搜索按钮 -->\n            <template #title>\n                <van-button \n                    class=\"search-btn\" \n                    tpye=\"info\" \n                    size=\"small\" \n                    icon=\"search\" \n                    round\n                >搜索</van-button>\n            </template>\n        </van-nav-bar>\n\n        <!-- 频道列表 -->\n        <van-tabs v-model=\"active\" class=\"channel-tabs\" animated swipeable>\n            <van-tab title=\"标签 1\">内容 1</van-tab>\n            <van-tab title=\"标签 2\">内容 2</van-tab>\n            <van-tab title=\"标签 3\">内容 3</van-tab>\n            <van-tab title=\"标签 4\">内容 5</van-tab>\n            <van-tab title=\"标签 4\">内容 6</van-tab>\n            <van-tab title=\"标签 4\">内容 7</van-tab>\n            \n            <template #nav-right>\n                <div  class=\"horder\"></div>\n            </template>\n        </van-tabs>\n         <!-- / 频道列表 -->\n\n        <!-- 导入，注册，并使用 ArticleInfo 组件 -->\n        <!-- 在使用组件的时候，如果某个属性名是“小驼峰”形式，则绑定属性的时候，建议改写成“连字符”格式。例如： -->\n        <!-- cmtCount 建议写成 cmt-count -->\n\n        <!-- <van-pull-refresh v-model=\"isLoading\" :disabled=\"finished\" @refresh=\"onRefresh\">\n      <van-list v-model=\"loading\" :finished=\"finished\" finished-text=\"没有更多了\" @load=\"onLoad\">\n        <ArticleInfo\n          v-for=\"item in artlist\"\n          :key=\"item.id\"\n          :title=\"item.title\"\n          :author=\"item.aut_name\"\n          :cmt-count=\"item.comm_count\"\n          :time=\"item.pubdate\"\n          :cover=\"item.cover\"\n        ></ArticleInfo>\n      </van-list>\n        </van-pull-refresh>-->\n    </div>\n</template>\n\n<script>\n// 按需导入 API 接口\n// import { getArticleListAPI } from '@/api/articleAPI.js'\n\n// 导入需要的组件\n// import ArticleInfo from '@/components/Article/ArticleInfo.vue'\n\nexport default {\n    name: \"my-Home\",\n    data() {\n        return {\n            active: 0,\n            // 页码值\n            page: 1,\n            // 每页显示多少条数据\n            limit: 10,\n            // 文章的数组\n            artlist: [],\n            // 是否正在加载下一页数据，如果 loading 为 true，则不会反复触发 load 事件\n            // 每当下一页数据请求回来之后，千万要记得，把 loading 从 true 改为 false\n            loading: true,\n            // 所有数据是否加载完毕了，如果没有更多数据了，一定要把 finished 改成 true\n            finished: false,\n            // 是否正在下拉刷新\n            isLoading: false,\n        };\n    },\n    created() {\n        // this.initArticleList()\n    },\n    methods: {\n        // 封装获取文章列表数据的方法\n        // async initArticleList(isRefresh) {\n        //   // 发起 GET 请求，获取文章的列表数据\n        //   const { data: res } = await getArticleListAPI(this.page, this.limit)\n        //   if (isRefresh) {\n        //     // 证明是下拉刷新；新数据在前，旧数据在后\n        //     // this.artlist = [新数据在后, 旧数据在前]\n        //     this.artlist = [...res, ...this.artlist]\n        //     this.isLoading = false\n        //   } else {\n        //     // 证明是上拉加载更多；旧数据在前，新数据在后\n        //     // this.artlist = [旧数据在前, 新数据在后]\n        //     this.artlist = [...this.artlist, ...res]\n        //     this.loading = false\n        //   }\n        //   if (res.length === 0) {\n        //     // 证明没有下一页数据了，直接把 finished 改为 true，表示数据加载完了！\n        //     this.finished = true\n        //   }\n        // },\n        // 只要 onLoad 被调用，就应该请求下一页数据\n        // onLoad() {\n        //   console.log('触发了 load 事件！')\n        //   // 1. 让页码值 +1\n        //   this.page++\n        //   // 2. 重新请求接口获取数据\n        //   this.initArticleList()\n        // },\n        // // 下拉刷新的处理函数\n        // onRefresh() {\n        //   console.log('触发了下拉刷新！')\n        //   // 1. 让页码值 +1\n        //   this.page++\n        //   // 2. 重新请求接口获取数据\n        //   this.initArticleList(true)\n        // }\n    },\n    // 注册组件\n    components: {\n        // ArticleInfo\n    },\n};\n</script>\n\n<style lang=\"less\" scoped>\n// .home-container {\n//   padding: 46px 0 50px 0;\n// }\n.home-container {\n    // padding-top: 174px;\n    // padding-bottom: 100px;\n    .van-nav-bar__title {\n        max-width: unset;\n    }\n    .search-btn {\n        width: 450px;\n        height: 64px;\n        background-color: #5babfb;\n        border: none;\n        font-size: 28px;\n        .van-button__icon {\n            font-size: 32px;\n        }\n        .van-button__text {\n            color: #fff;\n        }\n    }\n    /deep/ .channel-tabs {\n        .van-tabs__wrap {\n            height: 82px;\n            position: fixed;\n            z-index: 1;\n            left: 0;\n            top: 92px;\n            right: 0;\n        }\n        .van-tab {\n            border-right: 1px solid #edeff3;\n            min-width: 200px;\n            height: 82px;\n            font-size: 30px;\n            color: #777777;\n        }\n        .van-tab--active {\n            color: #333333;\n        }\n        .van-tabs__nav {\n            padding-bottom: 0;\n        }\n        .van-tabs__line {\n            width: 31px !important;\n            height: 6px;\n            background-color: #3296fa;\n            bottom: 8px;\n        }\n        .horder {\n            flex-shrink: 0;\n            height: 82px;\n            width: 66px;\n        }\n        .more-btn {\n            position: fixed;\n            right: 0;\n            width: 66px;\n            height: 82px;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            background-color: #fff;\n            opacity: 0.902;\n            i {\n                font-size: 33px;\n            }\n        }\n    }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}