{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Lisp/Desktop/items/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"C:/Users/Lisp/Desktop/items/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.fixed.js\";\nimport \"core-js/modules/es.array.splice.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getAllChannels, addUserChannels, deleteUserChannels } from \"@/api/users\";\nimport { mapState } from \"vuex\";\nimport { setItem } from \"@/utils/storage\";\nexport default {\n  name: \"channel-Edit\",\n  components: {},\n  data: function data() {\n    return {\n      allchannels: [],\n      isEdit: false,\n      fixed: [0]\n    };\n  },\n  props: {\n    myChannelData: {\n      type: Array,\n      require: true\n    },\n    active: Number\n  },\n  computed: _objectSpread(_objectSpread({}, mapState([\"user\"])), {}, {\n    filterChannels: function filterChannels() {\n      var _this = this;\n\n      /* .filter((item) => {\r\n                    let myChannel = this.myChannelData.find(\r\n                      (value) => item.name == value.name\r\n                    );\r\n                      myChannel 值只有两种可能\r\n                    1： myChannel == item  说明我的频道里面有  !item => 如果 item不是null，undefined\r\n                    2: undefined  就是没找到的\r\n                    return !myChannel;\r\n                  }); */\n      return this.allchannels.filter(function (item) {\n        return !_this.myChannelData.find(function (value) {\n          return value.name == item.name;\n        });\n      });\n    },\n    myDataList: function myDataList() {\n      return this.myChannelData;\n    }\n  }),\n  created: function created() {\n    // create 只会在组件被创建的时候使用。\n    // console.log(\"编辑组件被创建了\");\n    this.getChannels();\n    console.log(this.user);\n  },\n  methods: {\n    getChannels: function getChannels() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _yield$getAllChannels, data;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return getAllChannels();\n\n              case 2:\n                _yield$getAllChannels = _context.sent;\n                data = _yield$getAllChannels.data.data;\n                _this2.allchannels = data.channels;\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    addChannels: function addChannels(channel) {\n      var _this3 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // this.myChannelData.push(channel)  不要修改 props\n                _this3.myDataList.push(channel); // 数据持久化，\n\n\n                if (!_this3.user) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                _context2.prev = 2;\n                _context2.next = 5;\n                return addUserChannels({\n                  id: channel.id,\n                  seq: _this3.myDataList.length\n                });\n\n              case 5:\n                _context2.next = 10;\n                break;\n\n              case 7:\n                _context2.prev = 7;\n                _context2.t0 = _context2[\"catch\"](2);\n\n                _this3.$toast(\"添加操作失败,请稍后重试\");\n\n              case 10:\n                _context2.next = 13;\n                break;\n\n              case 12:\n                setItem(\"localChannel\", _this3.myDataList);\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[2, 7]]);\n      }))();\n    },\n    deleteChannels: function deleteChannels(channel) {\n      var _this4 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!_this4.user) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                _context3.prev = 1;\n                _context3.next = 4;\n                return deleteUserChannels(channel.id);\n\n              case 4:\n                _context3.next = 9;\n                break;\n\n              case 6:\n                _context3.prev = 6;\n                _context3.t0 = _context3[\"catch\"](1);\n\n                _this4.$toast(\"操作失败,请稍后重试\");\n\n              case 9:\n                _context3.next = 12;\n                break;\n\n              case 11:\n                setItem(\"localChannel\", _this4.myDataList);\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[1, 6]]);\n      }))();\n    },\n    fixedChannels: function fixedChannels(id) {\n      return this.fixed.includes(id); // 判定频道是否可删\n    },\n    onChangeCommit: function onChangeCommit(item, index) {\n      if (this.isEdit) {\n        // console.log(\"----\",item,index)\n        if (this.fixedChannels(item.id)) return this.$toast(\"置顶推荐频道不可删\");\n        if (index <= this.active) this.$emit(\"change-active\", this.active - 1, true);\n        this.myDataList.splice(index, 1);\n      } else {\n        this.$emit(\"change-active\", index);\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA,SACAA,cADA,EAEAC,eAFA,EAGAC,kBAHA,QAGA,aAHA;AAIA;AACA;AAEA;AACAC,sBADA;AAEAC,gBAFA;AAGAC,MAHA,kBAGA;AACA;AACAC,qBADA;AAEAC,mBAFA;AAGAC;AAHA;AAKA,GATA;AAUAC;AACAC;AACAC,iBADA;AAEAC;AAFA,KADA;AAKAC;AALA,GAVA;AAiBAC,4CACAC,kBADA;AAEAC,kBAFA,4BAEA;AAAA;;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA,qCACA;AAAA;AAAA;AAAA;AAAA,OADA;AAGA,KAhBA;AAiBAC,cAjBA,wBAiBA;AACA;AACA;AAnBA,IAjBA;AAsCAC,SAtCA,qBAsCA;AACA;AACA;AACA;AACAC;AACA,GA3CA;AA4CAC;AACAC,eADA,yBACA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAGArB,gBAHA;;AAAA;AAAA;AAEAK,oBAFA,yBAEAA,IAFA,CAEAA,IAFA;AAKA;;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,KAPA;AAQAiB,eARA,uBAQAC,OARA,EAQA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA,gDAFA,CAIA;;;AAJA,qBAKA,WALA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAQAtB;AACAuB,gCADA;AAEAC;AAFA,kBARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAcA;;AAdA;AAAA;AAAA;;AAAA;AAiBAC;;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBA,KA5BA;AA6BAC,kBA7BA,0BA6BAJ,OA7BA,EA6BA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACA,WADA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAIArB,8BAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAOA;;AAPA;AAAA;AAAA;;AAAA;AAUAwB;;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA,KAzCA;AA0CAE,iBA1CA,yBA0CAJ,EA1CA,EA0CA;AACA,qCADA,CACA;AACA,KA5CA;AA6CAK,kBA7CA,0BA6CAC,IA7CA,EA6CAC,KA7CA,EA6CA;AACA;AACA;AACA;AAEA;AACA;AACA,OANA,MAMA;AACA;AACA;AACA;AAvDA;AA5CA","names":["getAllChannels","addUserChannels","deleteUserChannels","name","components","data","allchannels","isEdit","fixed","props","myChannelData","type","require","active","computed","mapState","filterChannels","myDataList","created","console","methods","getChannels","addChannels","channel","id","seq","setItem","deleteChannels","fixedChannels","onChangeCommit","item","index"],"sourceRoot":"src/views/Home/component","sources":["channel-Edit.vue"],"sourcesContent":["<template>\r\n  <div class=\"editChanel\">\r\n    <!-- 我的频道  -->\r\n    <van-cell :border=\"false\" class=\"title-text\">\r\n      <div slot=\"title\">我的频道</div>\r\n\r\n      <van-button\r\n        plain\r\n        round\r\n        class=\"btn\"\r\n        size=\"small\"\r\n        type=\"danger\"\r\n        @click=\"isEdit = !isEdit\"\r\n        >{{ isEdit ? \"完成\" : \"编辑\" }}</van-button\r\n      >\r\n    </van-cell>\r\n    <van-grid class=\"my-grid\" :gutter=\"10\">\r\n      <van-grid-item\r\n        class=\"grid-item\"\r\n        v-for=\"(item, index) in myDataList\"\r\n        :key=\"item.id\"\r\n        :text=\"item.name\"\r\n        @click=\"onChangeCommit(item, index)\"\r\n      >\r\n        <span slot=\"text\" class=\"text\" :class=\"{ activea: index == active }\">{{\r\n          item.name\r\n        }}</span>\r\n        <van-icon\r\n          v-show=\"isEdit && !fixedChannels(item.id)\"\r\n          slot=\"icon\"\r\n          name=\"clear\"\r\n        ></van-icon>\r\n      </van-grid-item>\r\n    </van-grid>\r\n    <!-- / 我的频道  -->\r\n\r\n    <!-- 推荐频道 -->\r\n    <van-cell :border=\"false\" class=\"title-text\">\r\n      <div slot=\"title\">推荐频道</div>\r\n    </van-cell>\r\n    <van-grid class=\"re-grid\" :gutter=\"10\">\r\n      <van-grid-item\r\n        class=\"grid-item\"\r\n        icon=\"plus\"\r\n        v-for=\"value in filterChannels\"\r\n        :key=\"value.id\"\r\n        :text=\"value.name\"\r\n        @click =\"addChannels(value)\"\r\n      />\r\n    </van-grid>\r\n    <!-- / 推荐频道 -->\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { \r\n  getAllChannels,\r\n  addUserChannels,\r\n  deleteUserChannels, } from \"@/api/users\";\r\nimport { mapState } from \"vuex\"\r\nimport { setItem } from \"@/utils/storage\"\r\n\r\nexport default {\r\n  name: \"channel-Edit\",\r\n  components: {},\r\n  data() {\r\n    return {\r\n      allchannels: [],\r\n      isEdit: false,\r\n      fixed: [0],\r\n    };\r\n  },\r\n  props: {\r\n    myChannelData: {\r\n      type: Array,\r\n      require: true,\r\n    },\r\n    active: Number,\r\n  },\r\n  computed: {\r\n    ...mapState([\"user\"]),\r\n    filterChannels() {\r\n      /* .filter((item) => {\r\n                    let myChannel = this.myChannelData.find(\r\n                      (value) => item.name == value.name\r\n                    );\r\n\r\n                    myChannel 值只有两种可能\r\n                    1： myChannel == item  说明我的频道里面有  !item => 如果 item不是null，undefined\r\n                    2: undefined  就是没找到的\r\n                    return !myChannel;\r\n                  }); */\r\n      return this.allchannels.filter(\r\n        (item) => !this.myChannelData.find((value) => value.name == item.name)\r\n      );\r\n    },\r\n    myDataList(){\r\n      return this.myChannelData\r\n    }\r\n  },\r\n  created() {\r\n    // create 只会在组件被创建的时候使用。\r\n    // console.log(\"编辑组件被创建了\");\r\n    this.getChannels();\r\n    console.log(this.user);\r\n  },\r\n  methods: {\r\n    async getChannels() {\r\n      let {\r\n        data: { data },\r\n      } = await getAllChannels();\r\n\r\n      this.allchannels = data.channels;\r\n    },\r\n    async addChannels(channel){\r\n      // this.myChannelData.push(channel)  不要修改 props\r\n      this.myDataList.push(channel)\r\n      \r\n      // 数据持久化，\r\n      if(this.user){ \r\n        // 已登录\r\n        try{\r\n            await addUserChannels({\r\n              id:channel.id,\r\n              seq:this.myDataList.length\r\n            })\r\n\r\n        }catch(err){\r\n          this.$toast(\"添加操作失败,请稍后重试\")\r\n        }\r\n      }else{\r\n        setItem(\"localChannel\",this.myDataList)\r\n      }\r\n      \r\n    },\r\n    async deleteChannels(channel){\r\n      if(this.user){\r\n        // 用户已登录，编辑删除自己频道\r\n        try{\r\n          await deleteUserChannels(channel.id)\r\n\r\n        }catch {\r\n          this.$toast(\"操作失败,请稍后重试\")\r\n        }\r\n      }else{\r\n        setItem(\"localChannel\",this.myDataList)\r\n      }\r\n    },\r\n    fixedChannels(id) {\r\n      return this.fixed.includes(id); // 判定频道是否可删\r\n    },\r\n    onChangeCommit(item, index) {\r\n      if (this.isEdit) {\r\n        // console.log(\"----\",item,index)\r\n        if(this.fixedChannels(item.id)) return this.$toast(\"置顶推荐频道不可删\")\r\n          \r\n        if(index <= this.active) this.$emit(\"change-active\",this.active-1,true)\r\n        this.myDataList.splice(index,1)\r\n      } else {\r\n        this.$emit(\"change-active\", index);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.editChanel {\r\n  padding: 85px 0;\r\n  .title-text {\r\n    font-size: 32px;\r\n    color: #333333;\r\n  }\r\n  .btn {\r\n    width: 104px;\r\n    height: 48px;\r\n    font-size: 26px;\r\n    color: #f85959;\r\n    border: 1px solid #f85959;\r\n  }\r\n\r\n  /deep/ .my-grid {\r\n    .van-grid-item__icon-wrapper {\r\n      position: unset;\r\n      .van-icon {\r\n        font-size: 28px;\r\n        margin-right: 6px;\r\n        position: absolute;\r\n        top: -5px;\r\n        right: -5px;\r\n        font-size: 13px;\r\n        color: #cacaca;\r\n      }\r\n    }\r\n  }\r\n\r\n  /deep/ .grid-item {\r\n    width: 160px;\r\n    height: 86px;\r\n\r\n    .van-grid-item__content {\r\n      background-color: #f4f5f6;\r\n    }\r\n    .van-grid-item__text,\r\n    .text {\r\n      font-size: 28px;\r\n      color: #222;\r\n      margin-top: 0;\r\n      white-space: nowrap;\r\n    }\r\n    .activea {\r\n      color: red;\r\n    }\r\n  }\r\n  /deep/ .re-grid {\r\n    .van-grid-item__content {\r\n      flex-direction: row;\r\n      white-space: nowrap;\r\n      .van-icon {\r\n        font-size: 15px;\r\n        padding-right: 8px;\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}