{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.match.js\";\n\nfunction Random(_ref) {\n  var min = _ref.min,\n      max = _ref.max,\n      last = _ref.last,\n      _ref$first = _ref.first,\n      first = _ref$first === void 0 ? false : _ref$first;\n\n  if (first) {\n    last[0] = Math.round(Math.random() * (max - min)) + min;\n    return last[0];\n  }\n\n  last[1] = Math.round(Math.random() * (max - min)) + min;\n\n  if (last[1] != last[0]) {\n    last[0] = last[1];\n    return last[1];\n  } else {\n    return Random({\n      min: min,\n      max: max,\n      last: last\n    });\n  }\n}\n\nvar plugins = {\n  begin: 0,\n  install: function install(Vue) {\n    Vue.prototype.throttle = function (fn, delay) {\n      var curTime = Date.now();\n\n      if (curTime - plugins.begin > delay) {\n        fn();\n        plugins.begin = curTime;\n      }\n    };\n  }\n};\n\nfunction jsonpToJson(datas) {\n  var jsonData = null;\n  console.log(datas); // 下面是对获取到的数据进行处理，把jsonp格式的数据处理成json格式的数据\n\n  if (typeof datas === 'string') {\n    // 返回的是jsonp类型的数据，所以要用正则表达式来匹配截取json数据\n    var reg = /^\\w+\\((\\{[^()]+\\})\\)$/;\n    var matches = datas.match(reg); // matches匹配到的是数组，数组第一个是所有正则表达式匹配的字符串，第二个是第一个小括号匹配到的字符串\n\n    if (matches) {\n      jsonData = JSON.parse(matches[1]);\n    }\n  }\n\n  return jsonData;\n}\n\nexport { Random, plugins, jsonpToJson };","map":{"version":3,"sources":["C:/Users/Lisp/Desktop/items/src/utils/toolFn.js"],"names":["Random","min","max","last","first","Math","round","random","plugins","begin","install","Vue","prototype","throttle","fn","delay","curTime","Date","now","jsonpToJson","datas","jsonData","console","log","reg","matches","match","JSON","parse"],"mappings":";;;AACA,SAASA,MAAT,OAA6C;AAAA,MAA5BC,GAA4B,QAA5BA,GAA4B;AAAA,MAAvBC,GAAuB,QAAvBA,GAAuB;AAAA,MAAnBC,IAAmB,QAAnBA,IAAmB;AAAA,wBAAdC,KAAc;AAAA,MAAdA,KAAc,2BAAR,KAAQ;;AAEzC,MAAGA,KAAH,EAAS;AACLD,IAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,GAAG,GAAGD,GAAvB,CAAX,IAA0CA,GAApD;AACA,WAAOE,IAAI,CAAC,CAAD,CAAX;AACH;;AAEDA,EAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,GAAG,GAAGD,GAAvB,CAAX,IAA0CA,GAApD;;AAEA,MAAGE,IAAI,CAAC,CAAD,CAAJ,IAASA,IAAI,CAAC,CAAD,CAAhB,EAAoB;AAChBA,IAAAA,IAAI,CAAC,CAAD,CAAJ,GAAQA,IAAI,CAAC,CAAD,CAAZ;AACA,WAAOA,IAAI,CAAC,CAAD,CAAX;AACH,GAHD,MAGK;AACD,WAAOH,MAAM,CAAC;AAACC,MAAAA,GAAG,EAAHA,GAAD;AAAKC,MAAAA,GAAG,EAAHA,GAAL;AAASC,MAAAA,IAAI,EAAJA;AAAT,KAAD,CAAb;AACH;AAEJ;;AAED,IAAMK,OAAO,GAAG;AACZC,EAAAA,KAAK,EAAC,CADM;AAEZC,EAAAA,OAFY,mBAEJC,GAFI,EAEA;AACRA,IAAAA,GAAG,CAACC,SAAJ,CAAcC,QAAd,GAAyB,UAASC,EAAT,EAAYC,KAAZ,EAAkB;AACvC,UAAIC,OAAO,GAAGC,IAAI,CAACC,GAAL,EAAd;;AACA,UAAGF,OAAO,GAAGR,OAAO,CAACC,KAAlB,GAA0BM,KAA7B,EAAmC;AAC/BD,QAAAA,EAAE;AACFN,QAAAA,OAAO,CAACC,KAAR,GAAgBO,OAAhB;AACH;AAEJ,KAPD;AAQH;AAXW,CAAhB;;AAaA,SAASG,WAAT,CAAsBC,KAAtB,EAA6B;AACzB,MAAIC,QAAQ,GAAG,IAAf;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAFyB,CAGzB;;AACA,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B;AACA,QAAMI,GAAG,GAAG,uBAAZ;AACA,QAAMC,OAAO,GAAGL,KAAK,CAACM,KAAN,CAAYF,GAAZ,CAAhB,CAH6B,CAI7B;;AACA,QAAIC,OAAJ,EAAa;AACXJ,MAAAA,QAAQ,GAAGM,IAAI,CAACC,KAAL,CAAWH,OAAO,CAAC,CAAD,CAAlB,CAAX;AACD;AACF;;AACD,SAAOJ,QAAP;AACD;;AAEH,SAASrB,MAAT,EAAkBQ,OAAlB,EAA0BW,WAA1B","sourcesContent":["\r\nfunction Random({min, max,last,first=false}) {\r\n\r\n    if(first){\r\n        last[0] = Math.round(Math.random() * (max - min)) + min;\r\n        return last[0]\r\n    }\r\n    \r\n    last[1] = Math.round(Math.random() * (max - min)) + min;\r\n\r\n    if(last[1]!=last[0]){\r\n        last[0]=last[1]\r\n        return last[1]\r\n    }else{\r\n        return Random({min,max,last})\r\n    }\r\n    \r\n}\r\n\r\nconst plugins = {\r\n    begin:0,\r\n    install(Vue){\r\n        Vue.prototype.throttle = function(fn,delay){\r\n            let curTime = Date.now();\r\n            if(curTime - plugins.begin > delay){\r\n                fn()\r\n                plugins.begin = curTime\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\nfunction jsonpToJson (datas) {\r\n    let jsonData = null\r\n    console.log(datas);\r\n    // 下面是对获取到的数据进行处理，把jsonp格式的数据处理成json格式的数据\r\n    if (typeof datas === 'string') {            \r\n      // 返回的是jsonp类型的数据，所以要用正则表达式来匹配截取json数据\r\n      const reg = /^\\w+\\((\\{[^()]+\\})\\)$/\r\n      const matches = datas.match(reg)\r\n      // matches匹配到的是数组，数组第一个是所有正则表达式匹配的字符串，第二个是第一个小括号匹配到的字符串\r\n      if (matches) {\r\n        jsonData = JSON.parse(matches[1])\r\n      }\r\n    }\r\n    return jsonData\r\n  }\r\n\r\nexport { Random , plugins,jsonpToJson}\r\n\r\n"]},"metadata":{},"sourceType":"module"}