{"ast":null,"code":"import _toConsumableArray from \"C:/Users/Lisp/Desktop/items/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _asyncToGenerator from \"C:/Users/Lisp/Desktop/items/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.concat.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport ArticleItem from \"@/components/article-item\";\nimport { getArticleList } from \"@/api/getListApi\";\nimport { query } from \"@/utils/toolFn\";\nimport _ from \"lodash\";\nexport default {\n  name: \"ArticleList\",\n  components: {\n    ArticleItem: ArticleItem\n  },\n  // 页面被激活\n  activated: function activated() {\n    this.$refs.scrolllist.scrollTop = this.top;\n    this.fn = this.recordTopHandler();\n    this.$refs.scrolllist.addEventListener(\"scroll\", this.fn);\n  },\n  deactivated: function deactivated() {\n    this.$refs.scrolllist.removeEventListener(\"scroll\", this.fn);\n  },\n  data: function data() {\n    return {\n      fn: null,\n      top: 0,\n      list: [],\n      loading: false,\n      // 数据是否加载中\n      finished: false,\n      // 控制 数据是否 加载完毕\n      timestamp: null,\n      // 下一页数据的 页码时间戳\n      error: false,\n      // 加载失败\n      isfreshLoading: false // 下拉刷新 状态\n\n    };\n  },\n  props: [\"item\"],\n  watch: {\n    list: {\n      handler: function handler() {\n        if (this.$refs.listItem) {\n          this.imageLazy();\n        }\n      }\n    }\n  },\n  // updated(){\n  //         if(this.$refs.listItem ){\n  //             let observer = new IntersectionObserver(function(changes){\n  //                 // console.log(\"---\",changes[0]);\n  //                 console.log(changes[0].target.querySelector(\".van-image\"));\n  //                 // changes.forEach( article =>{\n  //                 //     let target = article.target.\n  //                 // })\n  //              })\n  //              let Item = document.querySelectorAll(\".item-container\")[7]\n  //             //  console.log(Item);\n  //              observer.observe(Item)\n  //             // query(\".item-container\").forEach( item=> observer.observe(item) )\n  //             //  console.log(observer);\n  //         }\n  // },\n  methods: {\n    imageLazy: function imageLazy() {\n      var observer = new IntersectionObserver(function (changes) {\n        // console.log(\"---\",changes[0]);\n        // console.log(changes[0].target.querySelector(\".van-image\"));\n        changes.forEach(function (artileItem) {\n          var target = artileItem.target;\n          var tarParent = target.parentElement;\n        });\n      }); // let Item = document.querySelectorAll(\".item-container\")[7]\n      // observer.observe(Item)\n\n      query(\".item-container\").forEach(function (item) {\n        return observer.observe(item);\n      });\n    },\n    onRefresh: function onRefresh() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this$list, _yield$getArticleList, data;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return getArticleList({\n                  channel_id: _this.item.id,\n                  timestamp: _this.timestamp\n                });\n\n              case 3:\n                _yield$getArticleList = _context.sent;\n                data = _yield$getArticleList.data.data;\n\n                // console.table(data.results);\n                (_this$list = _this.list).unshift.apply(_this$list, _toConsumableArray(data.results));\n\n                _this.timestamp = data.pre_timestamp; // 关闭下拉刷新状态\n\n                _this.isfreshLoading = false; // 刷新成功提示\n\n                _this.$toast(\"\\u5237\\u65B0\\u6210\\u529F,\\u66F4\\u65B0\".concat(data.results.length, \"\\u6761\\u6570\\u636E\"));\n\n                _context.next = 15;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](0);\n                _this.isfreshLoading = false;\n\n                _this.$toast(\"\\u83B7\\u53D6\\u6570\\u636E\\u5931\\u8D25\");\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 11]]);\n      }))();\n    },\n    onLoad: function onLoad() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var _this2$timestamp, _yield$getArticleList2, data;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return getArticleList({\n                  channel_id: _this2.item.id,\n                  timestamp: (_this2$timestamp = _this2.timestamp) !== null && _this2$timestamp !== void 0 ? _this2$timestamp : Date.now()\n                });\n\n              case 3:\n                _yield$getArticleList2 = _context2.sent;\n                data = _yield$getArticleList2.data.data;\n                _this2.list = [].concat(_toConsumableArray(_this2.list), _toConsumableArray(data.results)); // console.log(this.list);\n                // console.log(data);\n\n                _this2.loading = false;\n                _this2.timestamp = data.pre_timestamp;\n\n                if (data.results.length === 0) {\n                  _this2.finished = true;\n                }\n\n                _context2.next = 15;\n                break;\n\n              case 11:\n                _context2.prev = 11;\n                _context2.t0 = _context2[\"catch\"](0);\n                _this2.error = true;\n                _this2.loading = false;\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[0, 11]]);\n      }))();\n    },\n    recordTopHandler: function recordTopHandler() {\n      var _this3 = this;\n\n      // console.log(\"元素滚动着\");\n      return _.debounce(function () {\n        _this3.top = _this3.$refs.scrolllist.scrollTop;\n      }, 50, {\n        trailing: true\n      } // trailing 指定在延迟后调用\n      );\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;AACA;AAEA;AACA;AAGA;AACAA,qBADA;AAEAC;AACAC;AADA,GAFA;AAKA;AACAC,WANA,uBAMA;AAEA;AACA;AACA;AACA,GAXA;AAYAC,aAZA,yBAYA;AACA;AACA,GAdA;AAeAC,MAfA,kBAeA;AACA;AACAC,cADA;AAEAC,YAFA;AAGAC,cAHA;AAIAC,oBAJA;AAIA;AACAC,qBALA;AAKA;AACAC,qBANA;AAMA;AACAC,kBAPA;AAOA;AACAC,2BARA,CAQA;;AARA;AAUA,GA1BA;AA4BAC,iBA5BA;AA6BAC;AACAP;AACAQ,aADA,qBACA;AACA;AACA;AACA;AACA;AALA;AADA,GA7BA;AAsCA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACAC;AACAC,aADA,uBACA;AACA;AACA;AACA;AACAC;AACA;AACA;AAEA,SAJA;AAOA,OAVA,EADA,CAYA;AACA;;AACAC;AAAA;AAAA;AAEA,KAjBA;AAkBAC,aAlBA,uBAkBA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAMAC;AACAC,2CADA;AAEAZ;AAFA,kBANA;;AAAA;AAAA;AAKAN,oBALA,yBAKAA,IALA,CAKAA,IALA;;AAUA;AAEA;;AACA,qDAbA,CAeA;;AACA,6CAhBA,CAiBA;;AACA;;AAlBA;AAAA;;AAAA;AAAA;AAAA;AAoBA;;AACA;;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBA,KAzCA;AA0CAmB,UA1CA,oBA0CA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAOAF;AACAC,4CADA;AAEAZ;AAFA,kBAPA;;AAAA;AAAA;AAMAN,oBANA,0BAMAA,IANA,CAMAA,IANA;AAWA,2GAXA,CAYA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AApBA;AAAA;;AAAA;AAAA;AAAA;AAsBA;AACA;;AAvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyBA,KAnEA;AAoEAoB,oBApEA,8BAoEA;AAAA;;AACA;AACA,wBACA;AACA;AACA,OAHA,EAIA,EAJA,EAKA;AAAAC;AAAA,OALA,CAKA;AALA;AAOA;AA7EA;AA5DA","names":["name","components","ArticleItem","activated","deactivated","data","fn","top","list","loading","finished","timestamp","error","isfreshLoading","props","watch","handler","methods","imageLazy","changes","query","onRefresh","getArticleList","channel_id","onLoad","recordTopHandler","trailing"],"sourceRoot":"src/views/Home/component","sources":["article-list.vue"],"sourcesContent":["<template>\r\n    <div class=\"list-container\" ref=\"scrolllist\">\r\n        <van-pull-refresh v-model=\"isfreshLoading\" @refresh=\"onRefresh\">\r\n            <van-list\r\n                v-model=\"loading\"\r\n                :finished=\"finished\"\r\n                finished-text=\"没有更多了\"\r\n                :error.sync=\"error\"\r\n                error-text=\"请求失败，click重新加载\"\r\n                @load=\"onLoad\"\r\n            >\r\n                <!-- <van-cell v-for=\"(item,index) in list\" :key=\"index\" :title=\"item.title\" /> -->\r\n                <ArticleItem v-for=\"item in list\" \r\n                            :key=\"item.art_id\" \r\n                            :article=\"item\"\r\n                            ref=\"listItem\"\r\n                            ></ArticleItem>\r\n            </van-list>\r\n        </van-pull-refresh>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport ArticleItem from \"@/components/article-item\";\r\nimport { getArticleList } from \"@/api/getListApi\";\r\n\r\nimport { query } from \"@/utils/toolFn\"\r\nimport _ from \"lodash\";\r\n\r\n\r\nexport default {\r\n    name: \"ArticleList\",\r\n    components: {\r\n        ArticleItem,\r\n    },\r\n    // 页面被激活\r\n    activated() {\r\n\r\n        this.$refs.scrolllist.scrollTop = this.top\r\n        this.fn = this.recordTopHandler();\r\n        this.$refs.scrolllist.addEventListener(\"scroll\",this.fn );\r\n    },\r\n    deactivated() {\r\n        this.$refs.scrolllist.removeEventListener(\"scroll\", this.fn);\r\n    },\r\n    data() {\r\n        return {\r\n            fn: null,\r\n            top:0,\r\n            list: [],\r\n            loading: false, // 数据是否加载中\r\n            finished: false, // 控制 数据是否 加载完毕\r\n            timestamp: null, // 下一页数据的 页码时间戳\r\n            error: false, // 加载失败\r\n            isfreshLoading: false, // 下拉刷新 状态\r\n        };\r\n    },\r\n\r\n    props: [\"item\"],\r\n    watch:{\r\n        list:{\r\n            handler(){\r\n                if(this.$refs.listItem){\r\n                    this.imageLazy()\r\n                }\r\n            }\r\n        }\r\n    },\r\n    // updated(){\r\n    //         if(this.$refs.listItem ){\r\n    //             let observer = new IntersectionObserver(function(changes){\r\n    //                 // console.log(\"---\",changes[0]);\r\n\r\n    //                 console.log(changes[0].target.querySelector(\".van-image\"));\r\n    //                 // changes.forEach( article =>{\r\n\r\n    //                 //     let target = article.target.\r\n\r\n    //                 // })\r\n\r\n    //              })\r\n    //              let Item = document.querySelectorAll(\".item-container\")[7]\r\n    //             //  console.log(Item);\r\n    //              observer.observe(Item)\r\n    //             // query(\".item-container\").forEach( item=> observer.observe(item) )\r\n                 \r\n                 \r\n    //             //  console.log(observer);\r\n    //         }\r\n    // },\r\n    methods: {\r\n        imageLazy(){\r\n                let observer = new IntersectionObserver(function(changes){\r\n                        // console.log(\"---\",changes[0]);\r\n                        // console.log(changes[0].target.querySelector(\".van-image\"));\r\n                        changes.forEach( artileItem =>{\r\n                            let target = artileItem.target\r\n                            let tarParent = target.parentElement\r\n                            \r\n                        })\r\n\r\n                        \r\n                })\r\n                // let Item = document.querySelectorAll(\".item-container\")[7]\r\n                // observer.observe(Item)\r\n                query(\".item-container\").forEach( item=> observer.observe(item) )\r\n\r\n        },\r\n        async onRefresh() {\r\n            try {\r\n                /* 下拉刷新获取最新数据在顶部\r\n              最新数据的时间戳 Date.now() */\r\n                let {\r\n                    data: { data },\r\n                } = await getArticleList({\r\n                    channel_id: this.item.id,\r\n                    timestamp: this.timestamp,\r\n                });\r\n                // console.table(data.results);\r\n\r\n                this.list.unshift(...data.results);\r\n                this.timestamp = data.pre_timestamp;\r\n\r\n                // 关闭下拉刷新状态\r\n                this.isfreshLoading = false;\r\n                // 刷新成功提示\r\n                this.$toast(`刷新成功,更新${data.results.length}条数据`);\r\n            } catch (err) {\r\n                this.isfreshLoading = false;\r\n                this.$toast(`获取数据失败`);\r\n            }\r\n        },\r\n        async onLoad() {\r\n            // 异步更新数据\r\n            // let params = { channel_id: this.item.id, timestamp: Date.now() };\r\n            try {\r\n                //  let { data } = await getArticleList(0,Date.now());\r\n                let {\r\n                    data: { data },\r\n                } = await getArticleList({\r\n                    channel_id: this.item.id,\r\n                    timestamp: this.timestamp ?? Date.now(),\r\n                });\r\n                this.list = [...this.list, ...data.results];\r\n                // console.log(this.list);\r\n                // console.log(data);\r\n\r\n                this.loading = false;\r\n                this.timestamp = data.pre_timestamp;\r\n\r\n                if (data.results.length === 0) {\r\n                    this.finished = true;\r\n                }\r\n            } catch (err) {\r\n                this.error = true;\r\n                this.loading = false;\r\n            }\r\n        },\r\n        recordTopHandler() {\r\n          // console.log(\"元素滚动着\");\r\n            return _.debounce(\r\n                () => {\r\n                    this.top = this.$refs.scrolllist.scrollTop\r\n                },\r\n                50,\r\n                { trailing: true } // trailing 指定在延迟后调用\r\n            );\r\n        },\r\n    },\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" scope>\r\n/* 如果需要记住每个频道滚动条的位置，\r\n    需要给每个滚动容器设置高度(默认监听的是 body的滚动事件)\r\n    给滚动容器设置高度，移动端最好使用 vh 和 vm */\r\n\r\n.list-container {\r\n    // height: 79vh; //  vh 可视区域高度  vw 可视区域宽度\r\n    height: 81vh; //  vh 可视区域高度  vw 可视区域宽度\r\n    overflow-y: auto;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}