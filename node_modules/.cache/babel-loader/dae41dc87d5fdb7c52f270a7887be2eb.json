{"ast":null,"code":"import \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport Overlay from '../../overlay';\nimport { context } from './context';\nimport { mount } from '../../utils/functional';\nimport { removeNode } from '../../utils/dom/node';\nvar defaultConfig = {\n  className: '',\n  customStyle: {}\n};\n\nfunction mountOverlay(vm) {\n  return mount(Overlay, {\n    on: {\n      // close popup when overlay clicked & closeOnClickOverlay is true\n      click: function click() {\n        vm.$emit('click-overlay');\n\n        if (vm.closeOnClickOverlay) {\n          if (vm.onClickOverlay) {\n            vm.onClickOverlay();\n          } else {\n            vm.close();\n          }\n        }\n      }\n    }\n  });\n}\n\nexport function updateOverlay(vm) {\n  var item = context.find(vm);\n\n  if (item) {\n    var el = vm.$el;\n    var config = item.config,\n        overlay = item.overlay;\n\n    if (el && el.parentNode) {\n      el.parentNode.insertBefore(overlay.$el, el);\n    }\n\n    _extends(overlay, defaultConfig, config, {\n      show: true\n    });\n  }\n}\nexport function openOverlay(vm, config) {\n  var item = context.find(vm);\n\n  if (item) {\n    item.config = config;\n  } else {\n    var overlay = mountOverlay(vm);\n    context.stack.push({\n      vm: vm,\n      config: config,\n      overlay: overlay\n    });\n  }\n\n  updateOverlay(vm);\n}\nexport function closeOverlay(vm) {\n  var item = context.find(vm);\n\n  if (item) {\n    item.overlay.show = false;\n  }\n}\nexport function removeOverlay(vm) {\n  var item = context.find(vm);\n\n  if (item) {\n    removeNode(item.overlay.$el);\n    context.remove(vm);\n  }\n}","map":{"version":3,"sources":["C:/Users/Lisp/Desktop/Vue-app/items/node_modules/vant/es/mixins/popup/overlay.js"],"names":["_extends","Overlay","context","mount","removeNode","defaultConfig","className","customStyle","mountOverlay","vm","on","click","$emit","closeOnClickOverlay","onClickOverlay","close","updateOverlay","item","find","el","$el","config","overlay","parentNode","insertBefore","show","openOverlay","stack","push","closeOverlay","removeOverlay","remove"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,KAAT,QAAsB,wBAAtB;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,IAAIC,aAAa,GAAG;AAClBC,EAAAA,SAAS,EAAE,EADO;AAElBC,EAAAA,WAAW,EAAE;AAFK,CAApB;;AAKA,SAASC,YAAT,CAAsBC,EAAtB,EAA0B;AACxB,SAAON,KAAK,CAACF,OAAD,EAAU;AACpBS,IAAAA,EAAE,EAAE;AACF;AACAC,MAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtBF,QAAAA,EAAE,CAACG,KAAH,CAAS,eAAT;;AAEA,YAAIH,EAAE,CAACI,mBAAP,EAA4B;AAC1B,cAAIJ,EAAE,CAACK,cAAP,EAAuB;AACrBL,YAAAA,EAAE,CAACK,cAAH;AACD,WAFD,MAEO;AACLL,YAAAA,EAAE,CAACM,KAAH;AACD;AACF;AACF;AAZC;AADgB,GAAV,CAAZ;AAgBD;;AAED,OAAO,SAASC,aAAT,CAAuBP,EAAvB,EAA2B;AAChC,MAAIQ,IAAI,GAAGf,OAAO,CAACgB,IAAR,CAAaT,EAAb,CAAX;;AAEA,MAAIQ,IAAJ,EAAU;AACR,QAAIE,EAAE,GAAGV,EAAE,CAACW,GAAZ;AACA,QAAIC,MAAM,GAAGJ,IAAI,CAACI,MAAlB;AAAA,QACIC,OAAO,GAAGL,IAAI,CAACK,OADnB;;AAGA,QAAIH,EAAE,IAAIA,EAAE,CAACI,UAAb,EAAyB;AACvBJ,MAAAA,EAAE,CAACI,UAAH,CAAcC,YAAd,CAA2BF,OAAO,CAACF,GAAnC,EAAwCD,EAAxC;AACD;;AAEDnB,IAAAA,QAAQ,CAACsB,OAAD,EAAUjB,aAAV,EAAyBgB,MAAzB,EAAiC;AACvCI,MAAAA,IAAI,EAAE;AADiC,KAAjC,CAAR;AAGD;AACF;AACD,OAAO,SAASC,WAAT,CAAqBjB,EAArB,EAAyBY,MAAzB,EAAiC;AACtC,MAAIJ,IAAI,GAAGf,OAAO,CAACgB,IAAR,CAAaT,EAAb,CAAX;;AAEA,MAAIQ,IAAJ,EAAU;AACRA,IAAAA,IAAI,CAACI,MAAL,GAAcA,MAAd;AACD,GAFD,MAEO;AACL,QAAIC,OAAO,GAAGd,YAAY,CAACC,EAAD,CAA1B;AACAP,IAAAA,OAAO,CAACyB,KAAR,CAAcC,IAAd,CAAmB;AACjBnB,MAAAA,EAAE,EAAEA,EADa;AAEjBY,MAAAA,MAAM,EAAEA,MAFS;AAGjBC,MAAAA,OAAO,EAAEA;AAHQ,KAAnB;AAKD;;AAEDN,EAAAA,aAAa,CAACP,EAAD,CAAb;AACD;AACD,OAAO,SAASoB,YAAT,CAAsBpB,EAAtB,EAA0B;AAC/B,MAAIQ,IAAI,GAAGf,OAAO,CAACgB,IAAR,CAAaT,EAAb,CAAX;;AAEA,MAAIQ,IAAJ,EAAU;AACRA,IAAAA,IAAI,CAACK,OAAL,CAAaG,IAAb,GAAoB,KAApB;AACD;AACF;AACD,OAAO,SAASK,aAAT,CAAuBrB,EAAvB,EAA2B;AAChC,MAAIQ,IAAI,GAAGf,OAAO,CAACgB,IAAR,CAAaT,EAAb,CAAX;;AAEA,MAAIQ,IAAJ,EAAU;AACRb,IAAAA,UAAU,CAACa,IAAI,CAACK,OAAL,CAAaF,GAAd,CAAV;AACAlB,IAAAA,OAAO,CAAC6B,MAAR,CAAetB,EAAf;AACD;AACF","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport Overlay from '../../overlay';\nimport { context } from './context';\nimport { mount } from '../../utils/functional';\nimport { removeNode } from '../../utils/dom/node';\nvar defaultConfig = {\n  className: '',\n  customStyle: {}\n};\n\nfunction mountOverlay(vm) {\n  return mount(Overlay, {\n    on: {\n      // close popup when overlay clicked & closeOnClickOverlay is true\n      click: function click() {\n        vm.$emit('click-overlay');\n\n        if (vm.closeOnClickOverlay) {\n          if (vm.onClickOverlay) {\n            vm.onClickOverlay();\n          } else {\n            vm.close();\n          }\n        }\n      }\n    }\n  });\n}\n\nexport function updateOverlay(vm) {\n  var item = context.find(vm);\n\n  if (item) {\n    var el = vm.$el;\n    var config = item.config,\n        overlay = item.overlay;\n\n    if (el && el.parentNode) {\n      el.parentNode.insertBefore(overlay.$el, el);\n    }\n\n    _extends(overlay, defaultConfig, config, {\n      show: true\n    });\n  }\n}\nexport function openOverlay(vm, config) {\n  var item = context.find(vm);\n\n  if (item) {\n    item.config = config;\n  } else {\n    var overlay = mountOverlay(vm);\n    context.stack.push({\n      vm: vm,\n      config: config,\n      overlay: overlay\n    });\n  }\n\n  updateOverlay(vm);\n}\nexport function closeOverlay(vm) {\n  var item = context.find(vm);\n\n  if (item) {\n    item.overlay.show = false;\n  }\n}\nexport function removeOverlay(vm) {\n  var item = context.find(vm);\n\n  if (item) {\n    removeNode(item.overlay.$el);\n    context.remove(vm);\n  }\n}"]},"metadata":{},"sourceType":"module"}